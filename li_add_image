#!/usr/bin/env python
#
# Copyright (C) 2018 Layered Insight - All Rights Reserved
# Unauthorized copying of this file, via any medium is strictly prohibited
# Proprietary and confidential

from __future__ import print_function
import argparse
import sys
import time
import layint_api
from layint_api.rest import ApiException
from vyper import v
from li_utils.envtools import env_setup

# Parse CLI
parser = argparse.ArgumentParser()
parser.add_argument("-v", "--verbose", help="Verbose logging", action="store_true")
parser.add_argument("--name", help="Name for image", required=True)
parser.add_argument("--description", help="Description for image")
parser.add_argument("--registry", help="Name of registry image is stored in", required=True)
parser.add_argument("--push-registry", help="Name of registry to push layered image", required=False)
parser.add_argument("--push-name", help="Name for image to push", required=False)
parser.add_argument("--config", help="Name of configuration to apply to image", required=False)
parser.add_argument("--configid", help="ID of configuration to apply to image", required=False)
parser.add_argument("--imageid", help="Database ID for image (for advanced users only)")
parser.add_argument("--instrument", help="Instrument image", action="store_true", required=False)
parser.add_argument("--wait", help="Wait for instrumentation to complete", action="store_true", required=False)
args = parser.parse_args()

def parse_image_name(i):
    tagPos = i.rfind(":")
    if tagPos is -1:
        return i, ""
    return i[:tagPos], i[tagPos+1:]

# image.configid can be empty, and then the default config will be used

if args.config is not None and args.configid is not None:
    print("--config cannot be used with --configid\n")
    print(parser.print_help())
    sys.exit(1)

env_setup()

layint_api.configuration.api_key['Authorization'] = v.get("api_key")
registry_api = layint_api.RegistryApi()
registry_api.api_client.host = v.get("api_host")

if args.verbose:
    print("Looking up registry '%s' on API host %s..." % (args.registry, v.get("api_host")))
try:
    registry = registry_api.get_registry_by_name(args.registry)
except ApiException as e:
    print("Exception when calling RegistryApi->get_registry_by_name: %s\n" % e)
    sys.exit(1)

push_registry=None
if args.push_registry is not None:
    try:
        push_registry = registry_api.get_registry_by_name(args.push_registry)
    except ApiException as e:
        print("Exception when calling RegistryApi->get_registry_by_name: %s\n" % e)
        sys.exit(1)

config = None
if args.config is not None or args.configid is not None:
    config_api = layint_api.ConfigurationApi()

    try:
        if args.configid is not None:
            if args.verbose:
                print("Looking up configid %s on API host %s..." % (args.configid, v.get("api_host")))
            config = config_api.get_config(args.configid)
        else:
            if args.verbose:
                print("Looking up config '%s' on API host %s..." % (args.config, v.get("api_host")))
            config = config_api.get_config_by_name(args.config)
    except ApiException as e:
        if args.configid is not None:
            print("Unable to get config with id %s:%s\n" % (args.configid, e))
        else:
            print("Unable to get config named '%s':%s\n" % (args.config, e))
        sys.exit(2)

# Image
image_api = layint_api.ImageApi()
image_api.api_client.host = v.get("api_host")
image = layint_api.Image()
# api server will parse image.name into image.pull_repository until deprecated...
#image.name = args.name
image.description = args.description
image.pull_repository = layint_api.Repository()
image.pull_repository.registry_id = registry.id
image.pull_repository.path, image.pull_repository.tag = parse_image_name(args.name)
if config is not None:
    image.config_id = config.id
if args.imageid:
    image.id = args.imageid

if args.push_registry is not None:
    if args.push_name is None:
        print("push_name required with push_registry argument")
        sys.exit(1)
    push_repository = layint_api.Repository()
    push_repository.registry_id = push_registry.id
    push_repository.path, push_repository.tag = parse_image_name(args.push_name)
    image.push_repositories = []
    image.push_repositories.append(push_repository)

instrument = "false"
if args.instrument:
    instrument = "true"

# Create new Image definition
if args.verbose:
    print("Creating Image %s on API host %s..." % (args.name, v.get("api_host")))
try:
    api_response = image_api.add_image(image=image, instrument_image=instrument)
    image.id = api_response.id
except ApiException as e:
    print("Exception when calling ImageApi->add_image: %s\n" % e)
    sys.exit(1)

if args.verbose:
    print("Image created, ID " + str(image.id))
else:
    # required for li_instrument
    print(str(image.id))

if args.wait:
    instrumented = False
    while instrumented != True:
        if args.verbose:
            print("Waiting for instrumentation of Image %s. Current status: %s" % (image.id, image.status_msg))
            # Flush output so it's seen in active build logs
            sys.stdout.flush()
        try:
            image = image_api.get_image(image.id)
            if image.status_msg == "OK":
                instrumented = True
            else:
                time.sleep(5)
        except ApiException as e:
            print("Exception when calling ImageApi->get_image: %s\n" % e)
            sys.exit()

    if args.verbose:
        print("Final image status: " + image.status_msg)
