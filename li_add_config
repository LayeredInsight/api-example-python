#!/usr/bin/env python
#
# Copyright (C) 2018 Layered Insight - All Rights Reserved
# Unauthorized copying of this file, via any medium is strictly prohibited
# Proprietary and confidential

from __future__ import print_function
import argparse
import sys
import layint_api
from layint_api.rest import ApiException
from vyper import v
from li_utils.envtools import env_setup

# Parse CLI
parser = argparse.ArgumentParser()
parser.add_argument("-v", "--verbose", help="Verbose logging", action="store_true")
parser.add_argument("--name", help="Name for config", required=True)
parser.add_argument("--mq", help="IP or hostname of message queue", required=True)
parser.add_argument("--policyid", help="ID of security policy to apply to the configuration", required=False)
parser.add_argument("--policy", help="Name of policy to add rule to", required=False)
parser.add_argument("--log-mode", help="Specify logging mode [ 0 - 15 ] (15 is all logs)", type=int, default=3)
parser.add_argument("--sniffing", help="Enable network sniffing (default false)", choices=["true", "false"], default="false")
parser.add_argument("--defaultconfig", help="Specifies if this is default configuration (default false)", choices=["true", "false"], default="false")
args = parser.parse_args()

if (args.policy and args.policyid) or not (args.policy or args.policyid):
    print("Need to provide either --policy or --policyid arguments, but not both.\n")
    parser.print_help()
    sys.exit(2)

env_setup()

layint_api.configuration.api_key['Authorization'] = v.get("api_key")
config_api = layint_api.ConfigurationApi()
config_api.api_client.host = v.get("api_host")

policy_api = layint_api.PolicyApi()
policy_api.api_client.host = v.get("api_host")

# Config
config = layint_api.Config()
config.name = args.name
config.mq = args.mq
config.log_mode = args.log_mode
config.sniffing = args.sniffing
config.default = args.defaultconfig
config.policy_id = args.policyid

# Get policy by name
if args.policy is not None:
    if args.verbose:
        print("Getting Policy by name \"%s\" on API host %s..." % (args.policy, v.get("api_host")))
    try:
        config.policy_id = policy_api.get_policy_by_name(args.policy).id
    except ApiException as e:
        print("Exception when calling PolicyApi->get_policy_by_name: %s" % e)
        sys.exit(1)

# Create new Config definition
if args.verbose:
    print("Creating Config %s on API host %s..." % (args.name, v.get("api_host")))
try:
    api_response = config_api.add_config(config=config)
    config.id = api_response.id
    #pprint(api_response)
except ApiException as e:
    print("Exception when calling ConfigurationApi->add_config: %s\n" % e)
    sys.exit(1)

if args.verbose:
    print("Config created, ID " + str(config.id))
else:
    print(str(config.id))
