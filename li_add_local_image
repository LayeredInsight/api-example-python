#!/usr/bin/env python
#
# Copyright (C) 2018 Layered Insight - All Rights Reserved
# Unauthorized copying of this file, via any medium is strictly prohibited
# Proprietary and confidential

import argparse
import sys
import layint_api
from layint_api.rest import ApiException
from vyper import v
from li_utils.envtools import env_setup
import subprocess
import uuid
import gzip
import shutil
import time
import threading

# Spinner for waiting indicator
class Spinner:
    spinning = False
    delay = 0.1

    @staticmethod
    def spinning_cursor():
        while 1:
            for cursor in '|/-\\': yield cursor

    def __init__(self, delay=None):
        self.spinner_generator = self.spinning_cursor()
        if delay and float(delay): self.delay = delay

    def spinner_run(self):
        while self.spinning:
            sys.stdout.write(next(self.spinner_generator))
            sys.stdout.flush()
            time.sleep(self.delay)
            sys.stdout.write('\b')
            sys.stdout.flush()

    def start(self):
        self.spinning = True
        threading.Thread(target=self.spinner_run).start()

    def stop(self):
        self.spinning = False
        time.sleep(self.delay)

spinner = Spinner()
def cleanup():
    spinner.stop()
    subprocess.call(["rm", image_tar])
    subprocess.call(["rm", image_gz])

# Parse CLI
parser = argparse.ArgumentParser()
parser.add_argument("-v", "--verbose", help="Verbose logging", action="store_true")
parser.add_argument("--name", help="Name of local image", required=True)
parser.add_argument("--upload-timeout", help="Upload Timeout in seconds", required=False, default="3600")
args = parser.parse_args()

env_setup()

# set tag to default if not mentioned
if len(args.name.split(":")) < 2:
  print("Using default tag 'latest'")
  args.name = args.name + ":latest"

# Create unique image name
image_tar = "/tmp/" + str(uuid.uuid4()) + ".tar"
image_gz = image_tar + ".gz"

# Create image.tar
sys.stdout.write("Making image.tar...")
sys.stdout.flush()
spinner.start()
try:
    rc = subprocess.call(["docker", "save", args.name, "-o", image_tar])
    if rc != 0:
        print("Failed to create image tar using 'docker save'. Make sure that image exists locally.")
        sys.exit(1)
except(KeyboardInterrupt, SystemExit):
    cleanup()
    sys.exit(1)
spinner.stop()
print("Done")

# Compressing file
sys.stdout.write("Compressing image.tar...")
sys.stdout.flush()
spinner = Spinner()
spinner.start()
try:
    with open(image_tar, 'rb') as f_in, gzip.open(image_gz, 'wb') as f_out:
        shutil.copyfileobj(f_in, f_out)
except(KeyboardInterrupt, SystemExit):
    cleanup()
    print("Failed to compress image.tar. Exiting..")
    sys.exit(1)
spinner.stop()
print("Done")

# Upload image to scan
if args.verbose:
    print("Creating Image %s on API host %s..." % (args.name, v.get("api_host")))
print("Uploading image to scan...")

try:
    cmd = ['curl', '--max-time', args.upload_timeout, '-X', 'POST', v.get("api_host")+'/LocalImages?ImageName='+args.name, '-H', 'accept: application/json', '-H', 'Content-Type: multipart/form-data', '-H', 'Authorization: '+v.get("api_key"), '-F', 'image.tar=@'+image_gz+';type=application/gzip']
    resp = subprocess.check_output(cmd)
except subprocess.CalledProcessError as e:
    cleanup()
    print("Error while executing curl command %s\n" % e)
    sys.exit(1)

print('\n'+resp)
cleanup()
